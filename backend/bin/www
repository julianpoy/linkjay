#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var constants = require('constants');
var debug = require('debug')('backend:server');
var fs = require('fs');

var ssl = false;

process.argv.forEach(function (val, index, array) {
  if(val == "ssl") ssl = true;
});

var protocol;
var serverOptions;

if(ssl){
	protocol = require('https');
	serverOptions = {
			 key: fs.readFileSync('/ssl/privkey.pem'),
			 cert: fs.readFileSync('/ssl/fullchain.pem'),
			 ca: fs.readFileSync('/ssl/chain.pem'),
			 ciphers: [
			"ECDHE-RSA-AES128-GCM-SHA256",
			"ECDHE-ECDSA-AES128-GCM-SHA256",
			"ECDHE-RSA-AES256-GCM-SHA384",
			"ECDHE-ECDSA-AES256-GCM-SHA384",
			"DHE-RSA-AES128-GCM-SHA256",
			"ECDHE-RSA-AES128-SHA256",
			"DHE-RSA-AES128-SHA256",
			"AES128-GCM-SHA256",
			"!RC4", // RC4 be gone
			"HIGH",
			"!MD5",
			"!aNULL"
			].join(':'),
			honorCipherOrder: true,
			secureOptions: constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_SSLv2
	}
} else {
	protocol = require('http');
	serverOptions = {}
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create the server.
 */

var server;

if(ssl) server = protocol.createServer(serverOptions, app);
else server = protocol.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
